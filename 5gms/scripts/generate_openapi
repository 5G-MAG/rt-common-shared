#!/bin/sh
#
# 5G-MAG Reference Tools: Generate OpenAPI bindings tool
# ======================================================
#
# Author(s): David Waring <david.warin2@bbc.co.uk>
#            Dev Audsin <dev.audsin@bbc.co.uk>
# Copyright: Â©2022 British Broadcasting Corporation
#   License: 5G-MAG Public License v1.0
#
# Prerequisites:
#   - git
#   - java
#   - wget
#
# For full license terms please see the LICENSE file distributed with this
# program. If this file is missing then the license can be retrieved from
# https://drive.google.com/file/d/1cinCiA778IErENZ3JN52VFW-1ffHpx7Z/view
#
# This script will use wget and git to download the openapi-generator-cli tool
# and a specified branch of the 5G APIs. It will then create a set of bindings
# in a specified output language.
#

# Save location of this script and the name it was called by
scriptname=`basename "$0"`
scriptdir=`dirname "$0"`
scriptdir=`cd "$scriptdir"; pwd`

# Command line option defaults
default_branch='REL-17'
default_language=
default_api=
default_destdir='openapi'
default_openapi_gen_config=
default_openapi_gen_version='6.0.1'
default_yaml_dir_processor=
default_overrides_dirs="$scriptdir/../5G_APIs-overrides"

# script constants
GIT_5G_APIS_URL='https://forge.3gpp.org/rep/all/5G_APIs.git'
OPENAPI_GEN_URL_FORMAT='https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/${OPENAPI_GEN_VERSION}/openapi-generator-cli-${OPENAPI_GEN_VERSION}.jar'

# Parse command line arguments
ARGS=`getopt -n "$scriptname" -o 'a:b:c:l:d:g:ho:y:' -l 'api:,branch:,generator-config:,language:,directory:,openapi-generator-version:,help,overrides-directories:,yaml-directory-processor:' -s sh -- "$@"`

if [ $? -ne 0 ]; then
    print_syntax >&2
    exit 1
fi

print_syntax() {
    echo "Syntax: $scriptname [-h] [-b <release-branch>] [-d <directory>]"
    echo '                    [-c <openapi-generator-config>] [-g <version>]'
    echo '                    [-o <overrides-dir>[:<overrides-dir>...]]'
    echo '                    [-y <yaml-dir-processor>] -a <API-name>'
    echo '                    -l <language>[:<additional-properties>]'
}

print_help() {
    cat <<EOF
5G-MAG Reference Tools - Generate OpenAPI bindings

This script will download the 5G APIs and openapi-generator-cli tool and uses
them to create bindings of the specified language.

EOF
    print_syntax
    cat <<EOF

Options:
  -h         --help           Show this help message and exit.
  -a APIS    --api APIS       Space separated list of OpenAPI interfaces to
                              generate the bindings from (e.g.
                              "TS26512_M1_ContentHostingProvisioning").
  -b BRANCH  --branch BRANCH  Use the given branch of the 5G_APIs repository.
                              [default: $default_branch]
  -c CONFIG  --generator-config CONFIG
                              A configuration file to pass to
                              openapi-generator-cli.
  -d DIR     --directory DIR  Directory for the OpenAPI bindings.
                              [default: $default_destdir]
  -g VERSION --openapi-generator-version VERSION
                              Version of the openapi-generator-cli to use.
                              [default: $default_openapi_gen_version]
  -l LANG[:PROP[,PROP...]]  --language LANG[:PROP[,PROP...]]
                              Output language to use for OpenAPI bindings (e.g.
                              c or python).
  -o OVERRIDES-DIRS --overrides-directories OVERRIDES-DIRS
                              An optional list of directory paths, separated
                              by colons, that will be searched for OpenAPI YAML
                              files before the 5G APIs repository versions.
  -y EXE     --yaml-directory-processor EXE
                              Executable to run to process the 5G API yaml
                              directory before the generator is run. EXE will
                              be run with the 5G API directory path as its only
                              argument.
EOF
}

eval set -- "$ARGS"
unset ARGS

APIS="$default_api"
BRANCH="$default_branch"
DIRECTORY="$default_destdir"
LANGUAGE="$default_language"
OPENAPI_GEN_CONFIG="$default_openapi_gen_config"
OPENAPI_GEN_VERSION="$default_openapi_gen_version"
YAML_DIR_PROCESSOR="$default_yaml_dir_processor"
OVERRIDES_DIRS="$default_overrides_dirs"

while true; do
    case "$1" in
    -a|--api)
	APIS="$2"
	shift 2
	continue
	;;
    -b|--branch)
	BRANCH="$2"
	shift 2
	continue
	;;
    -c|--generator-config)
	OPENAPI_GEN_CONFIG="$2"
	shift 2
	continue
	;;
    -l|--language)
	LANGUAGE="$2"
	shift 2
	continue
	;;
    -d|--directory)
	DIRECTORY="$2"
	shift 2
	continue
	;;
    -g|--openapi-generator-version)
	OPENAPI_GEN_VERSION="$2"
	shift 2
	continue
	;;
    -h|--help)
	print_help
	exit 0
	;;
    -o|--overrides-directories)
	OVERRIDES_DIRS="$2"
	shift 2
	continue
	;;
    -y|--yaml-directory-processor)
	YAML_DIR_PROCESSOR="$2"
	shift 2
	continue
	;;
    --)
	shift
	break
	;;
    *)
	echo "Error: Command line argument \"$1\" unexpected" >&2
	print_syntax >&2
	exit 1
	;;
    esac
done

if [ $# -gt 0 ]; then
    echo "Error: Command line argument \"$1\" unexpected" >&2
    print_syntax >&2
    exit 1
fi

if [ -z "$APIS" -o -z "$LANGUAGE" ]; then
    echo 'Error: Required command line parameters are missing' >&2
    print_syntax >&2
    exit 1
fi

find_java() {
    # Use the JAVA environment variable if set else look for "java" command
    if [ -n "$JAVA" ]; then
	echo $JAVA
    else
	which java
    fi
}

# Get the absolute path to the destination directory
destdir=`realpath -m "$DIRECTORY"`

# Get the absolute path of the YAML directory processor executable
if [ -n "$YAML_DIR_PROCESSOR" ]; then
    YAML_DIR_PROCESSOR=`realpath "$YAML_DIR_PROCESSOR"`
    if [ ! -x "$YAML_DIR_PROCESSOR" ]; then
	echo "YAML directory processor is not executable" >&2
	exit 1
    fi
fi

# Convert openapi-generator-cli configuration file path to absolute path
if [ -n "$OPENAPI_GEN_CONFIG" ]; then
    OPENAPI_GEN_CONFIG=`realpath "$OPENAPI_GEN_CONFIG"`
fi

# Find JAVA
java=`find_java`

reverse_paths() {
    old_IFS="$IFS"
    IFS=:
    rev=''
    for p in $1; do
	p=`realpath "$p"`
	rev="${p}:$rev"
    done
    IFS="$old_IFS"
    echo "${rev%:}"
}

rev_overrides_dirs=`reverse_paths "$OVERRIDES_DIRS"`

echo "Overrides directories: $rev_overrides_dirs"

# Create temporary directory to work in
tmpdir=`mktemp -d --tmpdir openapi-generator.XXXXXXXX`
trap "rm -rf '$tmpdir'" 0 1 2 3 4 5 6 7 8 10 11 12 13 14
(
    cd "$tmpdir"
    # Download openapi-generator-cli
    openapi_gen_url=`eval echo "$OPENAPI_GEN_URL_FORMAT"`
    if ! wget "$openapi_gen_url" -O openapi-generator-cli.jar; then
        echo "Error: Failed to fetch openapi-generator-cli" >&2
        exit 1
    fi
    # Clone the 5G APIs git repository
    if ! git clone -b "$BRANCH" "$GIT_5G_APIS_URL"; then
        echo "Error: Failed to fetch branch $BRANCH from the 5G_APIs repository" >&2
        exit 1
    fi
    echo "At commit "`cd 5G_APIs; git log -g --pretty='format:%h %d' --max-count=1 HEAD`
    # import overrides
    (
        IFS=:
	for p in $rev_overrides_dirs; do
	    echo "Copying YAML files from $p..."
	    find "$p" -maxdepth 1 -type f -name '*.yaml' -print0 | xargs -0 -I ARGS /bin/cp -f ARGS 5G_APIs/
	done
    )
    # Make sure we have the APIS requested
    have_apis=1
    for API in $APIS; do
        if [ ! -e "5G_APIs/${API}.yaml" ]; then
            echo "Error: Could not find API, $API, in the 5G_APIs repository" >&2
	    have_apis=0
	fi
    done
    if [ $have_apis = 0 ]; then
	exit 1
    fi
    # Run YAML directory processor if one given
    if [ -n "$YAML_DIR_PROCESSOR" ]; then
	"$YAML_DIR_PROCESSOR" "$tmpdir/5G_APIs"
    fi
    # Prepare for API generation
    unset language
    unset additional_props
    IFS=: read -r language additional_props <<EOF
$LANGUAGE
EOF
    if [ -d "$destdir" ] && ! rm -rf "$destdir"; then
        echo "Error: Unable to remove old $DIRECTORY directory for replacement" >&2
	exit 1
    fi
    if ! mkdir -p "$destdir"; then
	echo "Error: Unable to create output directory $DIRECTORY" >&2
	exit 1
    fi
    for API in $APIS; do
        # Use openapi-generator-cli to convert the API file to the language
        # bindings
        "$java" -jar openapi-generator-cli.jar generate -i "5G_APIs/${API}.yaml" ${OPENAPI_GEN_CONFIG:+-c $OPENAPI_GEN_CONFIG} -g ${language} ${additional_props:+--additional-properties $additional_props} -o "${destdir}"
    done
)

exit 0
