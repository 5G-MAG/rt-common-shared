#define _OPENAPI_DATE_REGEX "^\\d{4}-\\d{2}-\\d{2}$"
#define _OPENAPI_DATE_TIME_REGEX "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:.\\d+)?(?:Z|[-+]\\d{2}:\\d{2})$"
#define _OPENAPI_URI_REGEX "^(?:[^:/?#]+:)?(?://[^/?#]*)?(?:[^?#]*)(?:\\?[^#]*)?(?:#.*)?$"
#define _OPENAPI_UUID_REGEX "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"

{{classname}}_t *{{classname}}_create(
{{^hasVars}}
    {{#isString}}
    char *value
    {{/isString}}
    {{^isString}}
        {{#composedSchemas}}
            {{#allOf}}
#error "Not implemented yet!"
            {{/allOf}}
            {{#anyOf}}
                {{#isPrimitiveType}}
    {{dataType}} *{{name}}{{^-last}},{{/-last}}
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
#error "Not implemented yet!"
                {{/isPrimitiveType}}
            {{/anyOf}}
            {{#oneOf}}
#error "Not implemented yet!"
            {{/oneOf}}
        {{/composedSchemas}}
    {{/isString}}
{{/hasVars}}
{{#vars}}
    {{^isContainer}}
        {{^isPrimitiveType}}
            {{#isEnum}}
    {{datatype}}_e {{name}}{{^-last}},{{/-last}}
            {{/isEnum}}
            {{^isEnum}}
                {{#isModel}}
    {{datatype}}_t *{{name}}{{^-last}},{{/-last}}
                {{/isModel}}
                {{^isModel}}
                    {{#isUuid}}
    {{datatype}} *{{name}}{{^-last}},{{/-last}}
                    {{/isUuid}}
                    {{#isEmail}}
    {{datatype}} *{{name}}{{^-last}},{{/-last}}
                    {{/isEmail}}
                    {{#isFreeFormObject}}
    OpenAPI_object_t *{{name}}{{^-last}},{{/-last}}
                    {{/isFreeFormObject}}
                    {{#isAnyType}}
    {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_t *{{name}}{{^-last}},{{/-last}}
                    {{/isAnyType}}
                {{/isModel}}
            {{/isEnum}}
        {{/isPrimitiveType}}
        {{#isPrimitiveType}}
            {{#isEnum}}
    {{classname}}_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_e {{name}}{{^-last}},{{/-last}}
            {{/isEnum}}
            {{^isEnum}}
                {{#isString}}
    {{datatype}} *{{name}}{{^-last}},{{/-last}}
                {{/isString}}
                {{#isModel}}
    {{datatype}} *{{name}}{{^-last}},{{/-last}}
                {{/isModel}}
                {{#isByteArray}}
    {{datatype}} *{{name}}{{^-last}},{{/-last}}
                {{/isByteArray}}
                {{#isNumeric}}
                    {{^required}}
    bool is_{{name}},
                    {{/required}}
    {{datatype}} {{name}}{{^-last}},{{/-last}}
                {{/isNumeric}}
                {{#isBoolean}}
                    {{^required}}
    bool is_{{name}},
                    {{/required}}
    {{datatype}} {{name}}{{^-last}},{{/-last}}
                {{/isBoolean}}
            {{/isEnum}}
            {{#isBinary}}
    OpenAPI_{{datatype}} {{name}}{{^-last}},{{/-last}}
            {{/isBinary}}
            {{#isDate}}
    {{datatype}} *{{name}}{{^-last}},{{/-last}}
            {{/isDate}}
            {{#isDateTime}}
    {{datatype}} *{{name}}{{^-last}},{{/-last}}
            {{/isDateTime}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
        {{#isArray}}
    OpenAPI_{{datatype}}_t *{{name}}{{^-last}},{{/-last}}
        {{/isArray}}
        {{#isMap}}
    OpenAPI_{{datatype}} {{name}}{{^-last}},{{/-last}}
        {{/isMap}}
    {{/isContainer}}
{{/vars}})
{
    {{classname}}_t *{{classname}}_local_var = ogs_malloc(sizeof({{classname}}_t));
    ogs_assert({{classname}}_local_var);

{{^hasVars}}
    {{#isString}}
    {{classname}}_local_var->value = value;
    {{/isString}}{{^isString}}
        {{#composedSchemas}}
            {{#allOf}}
#error "Not implemented yet!"
            {{/allOf}}
            {{#anyOf}}
                {{#isPrimitiveType}}
    {{classname}}_local_var->{{name}} = {{name}};
                {{/isPrimitiveType}}{{^isPrimitiveType}}
#error "Not implemented yet!"
                {{/isPrimitiveType}}
            {{/anyOf}}
            {{#oneOf}}
#error "Not implemented yet!"
            {{/oneOf}}
        {{/composedSchemas}}
    {{/isString}}
{{/hasVars}}{{#vars}}
    {{^isContainer}}
        {{#isPrimitiveType}}
            {{^isEnum}}
                {{#isNumeric}}
                    {{^required}}
    {{classname}}_local_var->is_{{{name}}} = is_{{{name}}};
                    {{/required}}
                {{/isNumeric}}
                {{#isBoolean}}
                    {{^required}}
    {{classname}}_local_var->is_{{{name}}} = is_{{{name}}};
                    {{/required}}
                {{/isBoolean}}
            {{/isEnum}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{classname}}_local_var->{{{name}}} = {{{name}}};
{{/vars}}

    return {{classname}}_local_var;
}

void {{classname}}_free({{classname}}_t *{{classname}})
{
    if (NULL == {{classname}}) {
        return;
    }
{{#vars}}
    {{^isContainer}}
        {{^isPrimitiveType}}
            {{^isEnum}}
                {{#isModel}}
    if ({{{classname}}}->{{{name}}}) {
        {{{complexType}}}_free({{{classname}}}->{{{name}}});
        {{classname}}->{{name}} = NULL;
    }
                {{/isModel}}
                {{^isModel}}
                    {{#isUuid}}
    if ({{{classname}}}->{{{name}}}) {
        ogs_free({{{classname}}}->{{{name}}});
        {{classname}}->{{name}} = NULL;
    }
                    {{/isUuid}}
                    {{#isEmail}}
    if ({{{classname}}}->{{{name}}}) {
        ogs_free({{{classname}}}->{{{name}}});
        {{classname}}->{{name}} = NULL;
    }
                    {{/isEmail}}
                    {{#isFreeFormObject}}
    if ({{{classname}}}->{{{name}}}) {
        OpenAPI_object_free({{{classname}}}->{{{name}}});
        {{classname}}->{{name}} = NULL;
    }
                    {{/isFreeFormObject}}
                    {{#isAnyType}}
    if ({{{classname}}}->{{{name}}}) {
        {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_free({{{classname}}}->{{{name}}});
        {{classname}}->{{name}} = NULL;
    }
                    {{/isAnyType}}
                {{/isModel}}
            {{/isEnum}}
        {{/isPrimitiveType}}
        {{#isPrimitiveType}}
            {{^isEnum}}
                {{#isString}}
    if ({{{classname}}}->{{{name}}}) {
        ogs_free({{{classname}}}->{{{name}}});
        {{classname}}->{{name}} = NULL;
    }
                {{/isString}}
                {{#isModel}}
    if ({{{classname}}}->{{{name}}}) {
        ogs_free({{{classname}}}->{{{name}}});
        {{classname}}->{{name}} = NULL;
    }
                {{/isModel}}
                {{#isByteArray}}
    if ({{{classname}}}->{{{name}}}) {
        ogs_free({{{classname}}}->{{{name}}});
        {{classname}}->{{name}} = NULL;
    }
                {{/isByteArray}}
            {{/isEnum}}
            {{#isBinary}}
    if ({{{classname}}}->{{{name}}}) {
        ogs_free({{{classname}}}->{{{name}}}->data);
        {{classname}}->{{name}} = NULL;
    }
            {{/isBinary}}
            {{#isDate}}
    if ({{{classname}}}->{{{name}}}) {
        ogs_free({{{classname}}}->{{{name}}});
        {{classname}}->{{name}} = NULL;
    }
            {{/isDate}}
            {{#isDateTime}}
    if ({{{classname}}}->{{{name}}}) {
        ogs_free({{{classname}}}->{{{name}}});
        {{classname}}->{{name}} = NULL;
    }
            {{/isDateTime}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
        {{#isArray}}
    if ({{{classname}}}->{{{name}}}) {
            {{^isEnum}}
        OpenAPI_lnode_t *node = NULL;

        OpenAPI_list_for_each({{classname}}->{{name}}, node) {
	      {{#items}}
                {{#isPrimitiveType}}
            ogs_free(node->data);
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
		  {{#isModel}}
            {{complexType}}_free(node->data);
		  {{/isModel}}
		  {{^isModel}}
		    {{#isUuid}}
	    ogs_free(node->data);
                    {{/isUuid}}
                    {{#isEmail}}
	    ogs_free(node->data);
                    {{/isEmail}}
		    {{#isFreeFormObject}}
            OpenAPI_object_free(node->data);
		    {{/isFreeFormObject}}
		    {{#isAnyType}}
            {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_free(node->data);
                    {{/isAnyType}}
                  {{/isModel}}
                {{/isPrimitiveType}}
              {{/items}}
        }
            {{/isEnum}}
        OpenAPI_list_free({{classname}}->{{name}});
        {{classname}}->{{name}} = NULL;
    }
        {{/isArray}}
        {{#isMap}}
    if ({{{classname}}}->{{{name}}}) {
        OpenAPI_lnode_t *node = NULL;

        OpenAPI_list_for_each({{classname}}->{{name}}, node) {
            OpenAPI_map_t *localKeyValue = (OpenAPI_map_t*)node->data;
            ogs_free(localKeyValue->key);
            {{^isEnum}}
              {{#items}}
                {{#isPrimitiveType}}
            ogs_free(localKeyValue->value);
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
            {{complexType}}_free(localKeyValue->value);
                {{/isPrimitiveType}}
              {{/items}}
            {{/isEnum}}
            OpenAPI_map_free(localKeyValue);
        }
        OpenAPI_list_free({{classname}}->{{name}});
        {{classname}}->{{name}} = NULL;
    }
        {{/isMap}}
    {{/isContainer}}
{{/vars}}{{^hasVars}}
    {{#isString}}
    if ({{classname}}->value) ogs_free({{classname}}->value);
    {{/isString}}{{^isString}}
        {{#composedSchemas}}
            {{#allOf}}
#error "Not implemented yet!"
            {{/allOf}}
            {{#anyOf}}
                {{#isPrimitiveType}}
    if ({{classname}}->{{name}}) ogs_free({{classname}}->{{name}});
                {{/isPrimitiveType}}{{^isPrimitiveType}}
#error "Not implemented yet!"
                {{/isPrimitiveType}}
            {{/anyOf}}
            {{#oneOf}}
#error "Not implemented yet!"
            {{/oneOf}}
        {{/composedSchemas}}
    {{/isString}}
{{/hasVars}}
    ogs_free({{classname}});
}

cJSON *{{classname}}_convertToJSON(const {{classname}}_t *{{classname}}, bool {{classname}}_as_request)
{
    cJSON *item = NULL;

    if ({{classname}} == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        return NULL;
    }

{{#hasVars}}
    item = cJSON_CreateObject();
{{#vars}}
    {{#isReadOnly}}
    if (!{{classname}}_as_request) {
    {{/isReadOnly}}
    {{#isWriteOnly}}
    if ({{classname}}_as_request) {
    {{/isWriteOnly}}
    {{#required}}
        {{^isEnum}}
            {{^isNumeric}}
            {{^isBoolean}}
    if (!{{{classname}}}->{{{name}}}) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        return NULL;
    }
            {{/isBoolean}}
            {{/isNumeric}}
        {{/isEnum}}
        {{#isEnum}}
            {{#isPrimitiveType}}
    if ({{{classname}}}->{{{name}}} == {{classname}}_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        return NULL;
    }
            {{/isPrimitiveType}}
            {{^isPrimitiveType}}
    if ({{{classname}}}->{{{name}}} == {{complexType}}_NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        return NULL;
    }
            {{/isPrimitiveType}}
        {{/isEnum}}
    {{/required}}
    {{^required}}
        {{^isEnum}}
            {{#isNumeric}}
    if ({{{classname}}}->is_{{{name}}}) {
            {{/isNumeric}}
            {{#isBoolean}}
    if ({{{classname}}}->is_{{{name}}}) {
            {{/isBoolean}}
            {{^isNumeric}}
            {{^isBoolean}}
    if ({{{classname}}}->{{{name}}}) {
            {{/isBoolean}}
            {{/isNumeric}}
        {{/isEnum}}
        {{#isEnum}}
            {{#isPrimitiveType}}
    if ({{{classname}}}->{{{name}}} != {{classname}}_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_NULL) {
            {{/isPrimitiveType}}
            {{^isPrimitiveType}}
    if ({{{classname}}}->{{{name}}} != {{complexType}}_NULL) {
            {{/isPrimitiveType}}
        {{/isEnum}}
    {{/required}}
    {{^isContainer}}
        {{#isPrimitiveType}}
            {{#isEnum}}
    if (cJSON_AddStringToObject(item, "{{{baseName}}}", {{classname}}_{{#lambda.uppercase}}{{{baseName}}}{{/lambda.uppercase}}_ToString({{{classname}}}->{{{name}}})) == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
            {{/isEnum}}
            {{^isEnum}}
                {{#isString}}
    if (cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
                {{/isString}}
                {{#isModel}}
                  {{#composedSchemas.allOf.0.isNumeric}}
    if ({{{classname}}}->{{{name}}}) {
        if (cJSON_AddNumberToObject(item, "{{{baseName}}}", *{{{classname}}}->{{{name}}}) == NULL) {
            ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
            goto end;
        }
    }
                  {{/composedSchemas.allOf.0.isNumeric}}
                  {{#composedSchemas.allOf.0.isString}}
    if ({{{classname}}}->{{{name}}}) {
        if (cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
            ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
            goto end;
        }
    }   
                  {{/composedSchemas.allOf.0.isString}}
                {{/isModel}}
                {{#isByteArray}}
    if (cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
                {{/isByteArray}}
                {{#isNumeric}}
    if (cJSON_AddNumberToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
                {{/isNumeric}}
                {{#isBoolean}}
    if (cJSON_AddBoolToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
                {{/isBoolean}}
            {{/isEnum}}
            {{#isBinary}}
    char* encoded_str_{{{name}}} = OpenAPI_base64encode({{{classname}}}->{{{name}}}->data,{{{classname}}}->{{{name}}}->len);
    if (cJSON_AddStringToObject(item, "{{{baseName}}}", encoded_str_{{{name}}}) == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
    ogs_free(encoded_str_{{{name}}});
            {{/isBinary}}
            {{#isDate}}
    if (cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
            {{/isDate}}
            {{#isDateTime}}
    if (cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
            {{/isDateTime}}
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
            {{#isEnum}}
    if (cJSON_AddStringToObject(item, "{{{baseName}}}", {{{complexType}}}_ToString({{{classname}}}->{{{name}}})) == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
            {{/isEnum}}
            {{^isEnum}}
                {{#isModel}}
    cJSON *{{{name}}}_local_JSON = {{complexType}}{{#isFreeFormObject}}object{{/isFreeFormObject}}_convertToJSON({{{classname}}}->{{{name}}}, {{classname}}_as_request);
    if ({{{name}}}_local_JSON == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
    cJSON_AddItemToObject(item, "{{{baseName}}}", {{{name}}}_local_JSON);
    if (item->child == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
                {{/isModel}}
                {{^isModel}}
                    {{#isUuid}}
    if (cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
                    {{/isUuid}}
                    {{#isEmail}}
    if (cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
                    {{/isEmail}}
                    {{#isFreeFormObject}}
    cJSON *{{{name}}}_object = OpenAPI_object_convertToJSON({{{classname}}}->{{{name}}}, {{classname}}_as_request);
    if ({{{name}}}_object == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
    cJSON_AddItemToObject(item, "{{{baseName}}}", {{{name}}}_object);
    if (item->child == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
                    {{/isFreeFormObject}}
                    {{#isAnyType}}
    cJSON *{{{name}}}_object = {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_convertToJSON({{{classname}}}->{{{name}}}, {{classname}}_as_request);
    if ({{{name}}}_object == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
    cJSON_AddItemToObject(item, "{{{baseName}}}", {{{name}}}_object);
    if (item->child == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
                    {{/isAnyType}}
                {{/isModel}}
            {{/isEnum}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
        {{#isArray}}
    cJSON *{{{name}}}List = cJSON_AddArrayToObject(item, "{{{baseName}}}");
    if ({{{name}}}List == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
    {
        OpenAPI_lnode_t *node = NULL;
        OpenAPI_list_for_each({{classname}}->{{{name}}}, node) {
            {{#isEnum}}
            if (cJSON_AddStringToObject({{{name}}}List, "", {{{complexType}}}_ToString((intptr_t)node->data)) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
            {{/isEnum}}
            {{^isEnum}}
                {{#items}}
                    {{#isPrimitiveType}}
                        {{#isString}}
            if (cJSON_AddStringToObject({{{name}}}List, "", (char*)node->data) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
                        {{/isString}}
                        {{#isByteArray}}
            if (cJSON_AddStringToObject({{{name}}}List, "", (char*)node->data) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
                        {{/isByteArray}}
                        {{#isNumeric}}
            if (cJSON_AddNumberToObject({{{name}}}List, "", (uintptr_t)node->data) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
                        {{/isNumeric}}
                        {{#isBoolean}}
            if (cJSON_AddBoolToObject({{{name}}}List, "", (uintptr_t)node->data) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
                        {{/isBoolean}}
                    {{/isPrimitiveType}}
                    {{^isPrimitiveType}}
                        {{#isModel}}
            cJSON *itemLocal = {{complexType}}_convertToJSON(node->data, {{classname}}_as_request);
            if (itemLocal == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
            cJSON_AddItemToArray({{{name}}}List, itemLocal);
                        {{/isModel}}
                        {{^isModel}}
                            {{#isUuid}}
            if (cJSON_AddStringToObject({{{name}}}List, "", (char*)node->data) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
                            {{/isUuid}}
                            {{#isEmail}}
            if (cJSON_AddStringToObject({{{name}}}List, "", (char*)node->data) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
                            {{/isEmail}}
                            {{#isFreeFormObject}}
	    cJSON *itemLocal = OpenAPI_object_convertToJSON(node->data, {{classname}}_as_request);
	    if (itemLocal == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
            cJSON_AddItemToArray({{{name}}}List, itemLocal);
                            {{/isFreeFormObject}}
                            {{#isAnyType}}
            cJSON *itemLocal = {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_convertToJSON(node->data, {{classname}}_as_request);
            if (itemLocal == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
            cJSON_AddItemToArray({{{name}}}List, itemLocal);
                            {{/isAnyType}}
                        {{/isModel}}
                    {{/isPrimitiveType}}
                {{/items}}
            {{/isEnum}}
        }
    }
        {{/isArray}}
        {{#isMap}}
    cJSON *{{{name}}}Map = cJSON_AddObjectToObject(item, "{{{baseName}}}");
    if ({{{name}}}Map == NULL) {
        ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
        goto end;
    }
    if ({{{classname}}}->{{{name}}}) {
        OpenAPI_lnode_t *node = NULL;
        OpenAPI_list_for_each({{{classname}}}->{{{name}}}, node) {
            OpenAPI_map_t *localKeyValue = (OpenAPI_map_t*)node->data;
            {{#isEnum}}
            if (cJSON_AddStringToObject({{{name}}}Map, localKeyValue->key, {{{complexType}}}_ToString((intptr_t)localKeyValue->value)) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
            {{/isEnum}}
            {{^isEnum}}
                {{#items.isPrimitiveType}}
                    {{#items.isString}}
            if (cJSON_AddStringToObject({{{name}}}Map, localKeyValue->key, (char*)localKeyValue->value) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
                    {{/items.isString}}
                    {{#items.isByteArray}}
            if(cJSON_AddStringToObject({{{name}}}Map, localKeyValue->key, (char*)localKeyValue->value) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
                    {{/items.isByteArray}}
                    {{#items.isNumeric}}
            if (cJSON_AddNumberToObject({{{name}}}Map, localKeyValue->key, (uintptr_t)localKeyValue->value) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
                    {{/items.isNumeric}}
                    {{#items.isBoolean}}
            if (cJSON_AddBoolToObject({{{name}}}Map, localKeyValue->key, (uintptr_t)localKeyValue->value) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
                    {{/items.isBoolean}}
                {{/items.isPrimitiveType}}
                {{^items.isPrimitiveType}}
                    {{#items.isModel}}
            cJSON *itemLocal = localKeyValue->value ?
                {{items.complexType}}_convertToJSON(localKeyValue->value, {{classname}}_as_request) :
                cJSON_CreateNull();
            if (itemLocal == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
            cJSON_AddItemToObject({{{name}}}Map, localKeyValue->key, itemLocal);
                    {{/items.isModel}}
                    {{^items.isModel}}
                        {{#items.isUuid}}
            if (cJSON_AddStringToObject({{{name}}}Map, localKeyValue->key, (char*)localKeyValue->value) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
                        {{/items.isUuid}}
                        {{#items.isEmail}}
            if (cJSON_AddStringToObject({{{name}}}Map, localKeyValue->key, (char*)localKeyValue->value) == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
                        {{/items.isEmail}}
                        {{#items.isFreeFormObject}}
            cJSON *itemLocal = localKeyValue->value ?
                OpenAPI_object_convertToJSON(localKeyValue->value, {{classname}}_as_request) :
                cJSON_CreateNull();
            if (itemLocal == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
            cJSON_AddItemToObject({{{name}}}Map, localKeyValue->key, itemLocal);
                        {{/items.isFreeFormObject}}
                        {{#items.isAnyType}}
            cJSON *itemLocal = localKeyValue->value ?
                {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_convertToJSON(localKeyValue->value, {{classname}}_as_request) :
                cJSON_CreateNull();
            if (itemLocal == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
            cJSON_AddItemToObject({{{name}}}Map, localKeyValue->key, itemLocal);
                        {{/items.isAnyType}}
		        {{#items.isContainer}}
                            {{#items.isArray}}
	    cJSON *itemLocal = localKeyValue->value ? cJSON_CreateArray() : cJSON_CreateNull();
	    if (itemLocal == NULL) {
                ogs_error("{{classname}}_convertToJSON() failed [{{{name}}}]");
                goto end;
            }
            if (localKeyValue->value) {
                OpenAPI_list_t *list = (OpenAPI_list_t*)localKeyValue->value;
                OpenAPI_lnode_t *node = NULL;
		OpenAPI_list_for_each(list, node) {
                    {{items.items.dataType}}_t *item = ({{items.items.dataType}}_t*)node->data;
		    cJSON *item_json = {{items.items.dataType}}_convertToJSON(item, {{classname}}_as_request);
		    cJSON_AddItemToArray(itemLocal, item_json);
                }
            }
            cJSON_AddItemToObject({{{name}}}Map, localKeyValue->key, itemLocal);
                            {{/items.isArray}}
                            {{#items.isMap}}
#error "Not implemented yet!"
                            {{/items.isMap}}
	                {{/items.isContainer}}
                    {{/items.isModel}}
                {{/items.isPrimitiveType}}
            {{/isEnum}}
        }
    }
        {{/isMap}}
    {{/isContainer}}
    {{^required}}
    }
    {{/required}}
    {{#isWriteOnly}}
    }
    {{/isWriteOnly}}
    {{#isReadOnly}}
    }
    {{/isReadOnly}}

{{/vars}}
end:
{{/hasVars}}
{{^hasVars}}
    {{#isString}}
    item = cJSON_CreateString({{classname}}->value);
    {{/isString}}
    {{^isString}}
        {{#composedSchemas}}
            {{#allOf}}
#error "Not implemented yet!"
            {{/allOf}}
            {{#anyOf}}
                {{#isPrimitiveType}}
    {{^-first}}else {{/-first}}if ({{classname}}->{{name}}) {
                    {{#isString}}
        item = cJSON_CreateString({{classname}}->{{name}});
                    {{/isString}}
                    {{#isNumeric}}
        item = cJSON_CreateNumber((double)(*{{classname}}->{{name}}));
                    {{/isNumeric}}
    }
                {{/isPrimitiveType}}{{^isPrimitiveType}}
#error "Not implemented yet!"
                {{/isPrimitiveType}}
            {{/anyOf}}
            {{#oneOf}}
#error "Not implemented yet!"
            {{/oneOf}}
        {{/composedSchemas}}
    {{/isString}}
{{/hasVars}}
    return item;
}

{{classname}}_t *{{classname}}_parseFromJSON(cJSON *{{classname}}JSON, bool {{classname}}_as_request, const char **{{classname}}_parse_err, char **{{classname}}_err_parameter)
{
    {{classname}}_t *{{classname}}_local_var = NULL;

{{^hasVars}}
    {{#isString}}
    char *value = NULL;
    {{/isString}}{{^isString}}
        {{#composedSchemas}}
            {{#allOf}}
#error "Not implemented yet!"
            {{/allOf}}
            {{#anyOf}}
                {{#isPrimitiveType}}
    {{dataType}} *{{name}} = NULL;
                {{/isPrimitiveType}}{{^isPrimitiveType}}
#error "Not implemented yet!"
                {{/isPrimitiveType}}
            {{/anyOf}}
            {{#oneOf}}
#error "Not implemented yet!"
            {{/oneOf}}
        {{/composedSchemas}}
    {{/isString}}
{{/hasVars}}
{{#vars}}
    cJSON *{{{name}}} = NULL;
    {{^isContainer}}
        {{#isPrimitiveType}}
            {{#isEnum}}
    {{classname}}_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_e {{name}}Variable = 0;
            {{/isEnum}}
            {{#isBinary}}
    OpenAPI_binary_t *decoded_str_{{{name}}} = NULL;
            {{/isBinary}}
            {{#isModel}}
    {{dataType}} *{{name}}Ptr = NULL;
            {{/isModel}}
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
            {{#isEnum}}
    {{complexType}}_e {{name}}Variable = 0;
            {{/isEnum}}
            {{^isEnum}}
                {{#isModel}}
    {{^isFreeFormObject}}{{complexType}}{{/isFreeFormObject}}{{#isFreeFormObject}}OpenAPI_object{{/isFreeFormObject}}_t *{{name}}_local_nonprim = NULL;
                {{/isModel}}
                {{^isModel}}
                    {{#isFreeFormObject}}
    OpenAPI_object_t *{{name}}_local_object = NULL;
                    {{/isFreeFormObject}}
                    {{#isAnyType}}
    {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_t *{{name}}_local_object = NULL;
                    {{/isAnyType}}
                {{/isModel}}
            {{/isEnum}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
        {{#isArray}}
    OpenAPI_list_t *{{{name}}}List = NULL;
        {{/isArray}}
        {{#isMap}}
    OpenAPI_list_t *{{{name}}}List = NULL;
        {{/isMap}}
    {{/isContainer}}
{{/vars}}

    if ({{classname}}_parse_err) *{{classname}}_parse_err = NULL;
    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = NULL;

{{^hasVars}}
    {{#isString}}
    if (!cJSON_IsString({{classname}}JSON)) {
        ogs_error("{{classname}}_parseFromJSON() failed");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "{{title}} type not a string";
        goto end;
    }

    {{#pattern}}
    static OpenAPI_regex_t *{{{classname}}}_regex = NULL;
    if (!{{{classname}}}_regex) {
        {{{classname}}}_regex = OpenAPI_regex_register("{{{pattern}}}");
        if (!{{{classname}}}_regex) {
            ogs_warn("{{classname}}_parseFromJSON(): Bad regex pattern in OpenAPI for {{title}}, will not use for validation");
        }
    }
    if ({{{classname}}}_regex) {
        if (!OpenAPI_regex_match({{{classname}}}_regex, value)) {
            ogs_error("{{classname}}_parseFromJSON() failed, did not match pattern");
            if ({{classname}}_parse_err) *{{classname}}_parse_err = "{{title}} is not formatted correctly";
            goto end;
        }
    }   
    {{/pattern}}

    value = ogs_strdup({{classname}}JSON->valuestring);
    {{/isString}}{{^isString}}
        {{#composedSchemas}}
            {{#allOf}}
#error "Not implemented yet!"
            {{/allOf}}
            {{#anyOf}}
                {{#-first}}
    bool valid = false;
                {{/-first}}
                {{#isPrimitiveType}}
                    {{#isString}}
    if (cJSON_IsString({{classname}}JSON)) {
                        {{#pattern}}
        static OpenAPI_regex_t *{{name}}_regex = NULL;
        if (!{{name}}_regex) {
            {{name}}_regex = OpenAPI_regex_register("{{{pattern}}}");
            if (!{{name}}_regex) {
                ogs_warn("{{classname}}_parseFromJSON(): Bad regex pattern in OpenAPI for {{title}}, will not use for validation");
            }
        }
                        {{/pattern}}
        {{name}} = ogs_strdup({{classname}}JSON->valuestring);
                        {{#pattern}}
        if ({{name}}_regex) {
            if (!OpenAPI_regex_match({{name}}_regex, {{name}})) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{name}}] did not match pattern");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "{{title}}.{{baseName}} did not match validation pattern";
		if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
        }
                        {{/pattern}}
        valid = true;
    }
                    {{/isString}}
                    {{#isNumeric}}
    if (cJSON_IsNumber({{classname}}JSON)) {
        {{name}} = ogs_malloc(sizeof({{dataType}}));
        *{{name}} = ({{dataType}}){{classname}}JSON->valuedouble;
        valid = true;
    }
                    {{/isNumeric}}
                {{/isPrimitiveType}}{{^isPrimitiveType}}
#error "Not implemented yet!"
                {{/isPrimitiveType}}
                {{#-last}}
    if (!valid) {
        ogs_error("{{classname}}_parseFromJSON() failed, anyOf value not recognised");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "{{title}} type not a valid value type";
        goto end;
    }
                {{/-last}}
            {{/anyOf}}
            {{#oneOf}}
#error "Not implemented yet!"
            {{/oneOf}}
        {{/composedSchemas}}
    {{/isString}}
{{/hasVars}}
{{#vars}}
    {{#isReadOnly}}
    if (!{{classname}}_as_request) {
    {{/isReadOnly}}
    {{#isWriteOnly}}
    if ({{classname}}_as_request) {
    {{/isWriteOnly}}
    {{{name}}} = cJSON_GetObjectItemCaseSensitive({{classname}}JSON, "{{{baseName}}}");
    {{#required}}
    if (!{{{name}}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Required field \"{{{name}}}\" not found";
        goto end;
    }
    {{/required}}
    {{^required}}
    if ({{{name}}}) {
    {{/required}}
    {{^isContainer}}
        {{#isPrimitiveType}}
            {{#isEnum}}
    if (!cJSON_IsString({{{name}}})) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not an enumeration string";
	if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
    {{name}}Variable = {{classname}}_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_FromString({{{name}}}->valuestring);
    if ({{name}}Variable < 0) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" value not recognised";
	if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
            {{/isEnum}}
            {{^isEnum}}
                {{#isModel}}
                  {{#composedSchemas.allOf.0.isNumeric}}
    if (!cJSON_IsNumber({{{name}}})) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a number";
	if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
    {{name}}Ptr = ogs_calloc(1, sizeof({{dataType}}));
    if (!{{name}}Ptr) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to allocate memory for \"{{{baseName}}}\"";
	if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
    *{{name}}Ptr = {{{name}}}->valuedouble;
                    {{#composedSchemas.allOf.0.minimum}}
    if (*{{name}}Ptr <{{#composedSchemas.allOf.0.exclusiveMinimum}}={{/composedSchemas.allOf.0.exclusiveMinimum}} {{composedSchemas.allOf.0.minimum}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: Out of range, number less than {{#composedSchemas.allOf.0.exclusiveMinimum}}or equal to {{/composedSchemas.allOf.0.exclusiveMinimum}}{{composedSchemas.allOf.0.minimum}}");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" value is less than {{#composedSchemas.allOf.0.exclusiveMinimum}}or equal to {{/composedSchemas.allOf.0.exclusiveMinimum}}{{composedSchemas.allOf.0.minimum}} [range {{#composedSchemas.allOf.0.exclusiveMinimum}}({{/composedSchemas.allOf.0.exclusiveMinimum}}{{^composedSchemas.allOf.0.exclusiveMinimum}}[{{/composedSchemas.allOf.0.exclusiveMinimum}}{{composedSchemas.allOf.0.minimum}}..{{#composedSchemas.allOf.0.maximum}}{{composedSchemas.allOf.0.maximum}}{{#composedSchemas.allOf.0.exclusiveMaximum}}){{/composedSchemas.allOf.0.exclusiveMaximum}}{{^composedSchemas.allOf.0.exclusiveMaximum}}]{{/composedSchemas.allOf.0.exclusiveMaximum}}{{/composedSchemas.allOf.0.maximum}}{{^composedSchemas.allOf.0.maximum}}inf]{{/composedSchemas.allOf.0.maximum}}]";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                    {{/composedSchemas.allOf.0.minimum}}
                    {{#minimum}}
    if (*{{name}}Ptr <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: Out of range, number less than {{#exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" value is less than {{#exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}} [range {{#exclusiveMinimum}}({{/exclusiveMinimum}}{{^exclusiveMinimum}}[{{/exclusiveMinimum}}{{minimum}}..{{#maximum}}{{maximum}}{{#exclusiveMaximum}}){{/exclusiveMaximum}}{{^exclusiveMaximum}}]{{/exclusiveMaximum}}{{/maximum}}{{^maximum}}inf]{{/maximum}}]";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                    {{/minimum}}
                    {{#composedSchemas.allOf.0.maximum}}
    if (*{{name}}Ptr >{{#composedSchemas.allOf.0.exclusiveMaximum}}={{/composedSchemas.allOf.0.exclusiveMaximum}} {{composedSchemas.allOf.0.maximum}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: Out of range, number greater than {{#composedSchemas.allOf.0.exclusiveMaximum}}or equal to {{/composedSchemas.allOf.0.exclusiveMaximum}}{{composedSchemas.allOf.0.maximum}}");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" value is greater than {{#composedSchemas.allOf.0.exclusiveMaximum}}or equal to {{/composedSchemas.allOf.0.exclusiveMaximum}}{{composedSchemas.allOf.0.maximum}} [range {{#composedSchemas.allOf.0.minimum}}{{#composedSchemas.allOf.0.exclusiveMinimum}}({{/composedSchemas.allOf.0.exclusiveMinimum}}{{^composedSchemas.allOf.0.exclusiveMinimum}}[{{/composedSchemas.allOf.0.exclusiveMinimum}}{{composedSchemas.allOf.0.minimum}}{{/composedSchemas.allOf.0.minimum}}{{^composedSchemas.allOf.0.minimum}}[-inf{{/composedSchemas.allOf.0.minimum}}..{{composedSchemas.allOf.0.maximum}}{{#composedSchemas.allOf.0.exclusiveMaximum}}){{/composedSchemas.allOf.0.exclusiveMaximum}}{{^composedSchemas.allOf.0.exclusiveMaximum}}]{{/composedSchemas.allOf.0.exclusiveMaximum}}]";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                    {{/composedSchemas.allOf.0.maximum}}
                    {{#maximum}}
    if (*{{name}}Ptr >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: Out of range, number greater than {{#exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" value is greater than {{#exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}} [range {{#minimum}}{{#exclusiveMinimum}}({{/exclusiveMinimum}}{{^exclusiveMinimum}}[{{/exclusiveMinimum}}{{minimum}}{{/minimum}}{{^minimum}}[-inf{{/minimum}}..{{maximum}}{{#exclusiveMaximum}}){{/exclusiveMaximum}}{{^exclusiveMaximum}}]{{/exclusiveMaximum}}]";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                    {{/maximum}}
                  {{/composedSchemas.allOf.0.isNumeric}}
                  {{#composedSchemas.allOf.0.isString}}
    if (!cJSON_IsString({{{name}}}){{^required}} && !cJSON_IsNull({{{name}}}){{/required}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a string{{^required}} or 'null'{{/required}}";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                        {{^required}}
    if (!cJSON_IsNull({{{name}}})) {
                    {{/required}}
        {{name}}Ptr = ogs_strdup({{{name}}}->valuestring);
                    {{^required}}
    }
                    {{/required}}
                  {{/composedSchemas.allOf.0.isString}}
                {{/isModel}}
                {{#isString}}
    if (!cJSON_IsString({{{name}}}){{^required}} && !cJSON_IsNull({{{name}}}){{/required}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a string{{^required}} or 'null'{{/required}}";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }

                    {{#pattern}}
    static OpenAPI_regex_t *{{{name}}}_regex = NULL;
    if (!{{{name}}}_regex) {
	{{{name}}}_regex = OpenAPI_regex_register("{{{pattern}}}");
        if (!{{{name}}}_regex) {
            ogs_warn("{{classname}}_parseFromJSON(): Bad regex pattern in {{title}}.{{baseName}}, will not validate strings");
        }
    }
    if ({{{name}}}_regex && !OpenAPI_regex_match({{{name}}}_regex, {{{name}}}->valuestring)) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: pattern does not match");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" does not match the validation pattern";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                    {{/pattern}}
                {{/isString}}
                {{#isByteArray}}
    if (!cJSON_IsString({{{name}}}){{^required}} && !cJSON_IsNull({{{name}}}){{/required}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a string{{^required}} or 'null'{{/required}}";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }

    /* TODO: insert check for base64 */
                {{/isByteArray}}
                {{#isDate}}
    if (!cJSON_IsString({{{name}}}){{^required}} && !cJSON_IsNull({{{name}}}){{/required}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a string{{^required}} or 'null'{{/required}}";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }

    static OpenAPI_regex_t *{{{name}}}_regex = NULL;
    if (!{{{name}}}_regex) {
        {{{name}}}_regex = OpenAPI_regex_register_named("date",_OPENAPI_DATE_REGEX);
        if (!{{{name}}}_regex) {
            ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: Failed to compile date regex");
            if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to compile the date validation regex for \"{{{baseName}}}\"";
            if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
            goto end;
        }
    }
    if ({{{name}}}_regex && !OpenAPI_regex_match({{{name}}}_regex, {{{name}}}->valuestring)) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: does not match date format");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" does not match date format";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                {{/isDate}}
                {{#isDateTime}}
    if (!cJSON_IsString({{{name}}}){{^required}} && !cJSON_IsNull({{{name}}}){{/required}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a string{{^required}} or 'null'{{/required}}";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }

    static OpenAPI_regex_t *{{{name}}}_regex = NULL;
    if (!{{{name}}}_regex) {
        {{{name}}}_regex = OpenAPI_regex_register_named("date-time",_OPENAPI_DATE_TIME_REGEX);
        if (!{{{name}}}_regex) {
            ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: Failed to compile date-time regex");
            if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to compile the date-time validation regex for \"{{{baseName}}}\"";
            if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
            goto end;
        }
    }
    if ({{{name}}}_regex && !OpenAPI_regex_match({{{name}}}_regex, {{{name}}}->valuestring)) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: does not match date-time format");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" does not match date-time format";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                {{/isDateTime}}
                {{#isUri}}
    if (!cJSON_IsString({{{name}}}){{^required}} && !cJSON_IsNull({{{name}}}){{/required}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a string{{^required}} or 'null'{{/required}}";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }

    static OpenAPI_regex_t *{{{name}}}_regex = NULL;
    if (!{{{name}}}_regex) {
        {{{name}}}_regex = OpenAPI_regex_register_named("uri",_OPENAPI_URI_REGEX);
        if (!{{{name}}}_regex) {
            ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: Failed to compile uri regex");
            if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to compile the uri validation regex for \"{{{baseName}}}\"";
            if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
            goto end;
        }
    }
    if ({{{name}}}_regex && !OpenAPI_regex_match({{{name}}}_regex, {{{name}}}->valuestring)) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: does not match uri format");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" does not match uri format";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                {{/isUri}}
                {{#isUuid}}
    if (!cJSON_IsString({{{name}}}){{^required}} && !cJSON_IsNull({{{name}}}){{/required}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a string{{^required}} or 'null'{{/required}}";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }

    static OpenAPI_regex_t *{{{name}}}_regex = NULL;
    if (!{{{name}}}_regex) {
        {{{name}}}_regex = OpenAPI_regex_register_named("uuid",_OPENAPI_UUID_REGEX);
        if (!{{{name}}}_regex) {
            ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: Failed to compile uuid regex");
            if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to compile the uuid validation regex for \"{{{baseName}}}\"";
            if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
            goto end;
        }
    }
    if ({{{name}}}_regex && !OpenAPI_regex_match({{{name}}}_regex, {{{name}}}->valuestring)) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: does not match uuid format"); 
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" does not match uuid format";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                {{/isUuid}}
                {{#isNumeric}}
    if (!cJSON_IsNumber({{{name}}})) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a number";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                  {{#minimum}}
    if (({{dataType}})({{{name}}}->valuedouble) <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: Out of range, number less than {{#exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" value is less than {{#exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}} [range {{#exclusiveMinimum}}({{/exclusiveMinimum}}{{^exclusiveMinimum}}[{{/exclusiveMinimum}}{{minimum}}..{{#maximum}}{{maximum}}{{#exclusiveMaximum}}){{/exclusiveMaximum}}{{^exclusiveMaximum}}]{{/exclusiveMaximum}}{{/maximum}}{{^maximum}}inf]{{/maximum}}]";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                  {{/minimum}}
                  {{#maximum}}
    if (({{dataType}})({{{name}}}->valuedouble) >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: Out of range, number greater than {{#exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" value is greater than {{#exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}} [range {{#minimum}}{{#exclusiveMinimum}}({{/exclusiveMinimum}}{{^exclusiveMinimum}}[{{/exclusiveMinimum}}{{minimum}}{{/minimum}}{{^minimum}}[-inf{{/minimum}}..{{maximum}}{{#exclusiveMaximum}}){{/exclusiveMaximum}}{{^exclusiveMaximum}}]{{/exclusiveMaximum}}]";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                  {{/maximum}}
                {{/isNumeric}}
                {{#isBoolean}}
    if (!cJSON_IsBool({{{name}}})) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a boolean";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                {{/isBoolean}}
            {{/isEnum}}
            {{#isBinary}}
    decoded_str_{{{name}}} = ogs_malloc(sizeof(OpenAPI_binary_t));
    ogs_assert(decoded_str_{{{name}}});
    if (!cJSON_IsString({{{name}}})) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a string";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
    decoded_str_{{{name}}}->data = OpenAPI_base64decode({{{name}}}->valuestring, strlen({{{name}}}->valuestring), &decoded_str_{{{name}}}->len);
    if (!decoded_str_{{{name}}}->data) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not base 64 encoded";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
            {{/isBinary}}
            {{#isDate}}
    if (!cJSON_IsString({{{name}}})) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a date string";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
            {{/isDate}}
            {{#isDateTime}}
    if (!cJSON_IsString({{{name}}}) && !cJSON_IsNull({{{name}}})) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a date-time string";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
            {{/isDateTime}}
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
            {{#isEnum}}
    if (!cJSON_IsString({{{name}}})) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not an enumeration string";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
    {{name}}Variable = {{complexType}}_FromString({{{name}}}->valuestring);
    if ({{name}}Variable < 0) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" enumerated value not recognised";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
            {{/isEnum}}
            {{^isEnum}}
                {{#isModel}}
    {{{name}}}_local_nonprim = {{complexType}}{{#isFreeFormObject}}object{{/isFreeFormObject}}_parseFromJSON({{{name}}}, {{classname}}_as_request, {{classname}}_parse_err, {{classname}}_err_parameter);
    if (!{{{name}}}_local_nonprim) {
        ogs_error("{{complexType}}{{#isFreeFormObject}}object{{/isFreeFormObject}}_parseFromJSON failed [{{{name}}}]");
        if ({{classname}}_err_parameter) {
	    if (*{{classname}}_err_parameter) {
                char *param = ogs_msprintf("{{baseName}}.%s", *{{classname}}_err_parameter);
		ogs_free(*{{classname}}_err_parameter);
		*{{classname}}_err_parameter = param;
	    } else {
		*{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
	    }
        }
        /* {{classname}}_parse_err already filled in by sub-parser */
        goto end;
    }
                {{/isModel}}
                {{^isModel}}
                    {{#isUuid}}
    if (!cJSON_IsString({{{name}}})) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a string";
	if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
        goto end;
    }

    static OpenAPI_regex_t *{{{name}}}_regex = NULL;
    if (!{{{name}}}_regex) {
        {{{name}}}_regex = OpenAPI_regex_register_named("uuid",_OPENAPI_UUID_REGEX);
        if (!{{{name}}}_regex) {
            ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: Failed to compile uuid regex");
            if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to compile the uuid validation regex for \"{{{baseName}}}\"";
            if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
            goto end;
        }
    }
    if ({{{name}}}_regex && !OpenAPI_regex_match({{{name}}}_regex, {{{name}}}->valuestring)) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: does not match uuid format");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" does not match uuid format";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{{baseName}}}");
        goto end;
    }
                    {{/isUuid}}
                    {{#isEmail}}
    if (!cJSON_IsString({{{name}}})) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a string";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
        goto end;
    }

    /* TODO: check string is email format */
                    {{/isEmail}}
                    {{#isFreeFormObject}}
    if (!cJSON_IsObject({{{name}}})) {
        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not an object";
        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
        goto end;
    }
    {{{name}}}_local_object = OpenAPI_object_parseFromJSON({{{name}}}, {{classname}}_as_request, {{classname}}_parse_err, {{classname}}_err_parameter);
                    {{/isFreeFormObject}}
                    {{#isAnyType}}
    {{{name}}}_local_object = {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_parseFromJSON({{{name}}}, {{classname}}_as_request, {{classname}}_parse_err, {{classname}}_err_parameter);
                    {{/isAnyType}}
                {{/isModel}}
            {{/isEnum}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
        {{#isArray}}
        cJSON *{{{name}}}_local = NULL;
        if (!cJSON_IsArray({{{name}}})) {
            ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
            if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not an array";
            if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
            goto end;
        }

        {{{name}}}List = OpenAPI_list_create();

        cJSON_ArrayForEach({{{name}}}_local, {{{name}}}) {
            {{#isEnum}}
            {{{complexType}}}_e {{{complexType}}}Value;
            if (!cJSON_IsString({{{name}}}_local)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not an enumeration string";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
            {{{complexType}}}Value = {{{complexType}}}_FromString({{{name}}}_local->valuestring);
            if ({{{complexType}}}Value < 0) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not a recognised enumeration value";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
            OpenAPI_list_add({{{name}}}List, (void *){{{complexType}}}Value);
            {{/isEnum}}
            {{^isEnum}}
                {{#items}}
                    {{#isPrimitiveType}}
                        {{#isString}}
            if (!cJSON_IsString({{{name}}}_local)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not a string";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
                            {{#pattern}}
            static OpenAPI_regex_t *{{{name}}}_regex = NULL;
            if (!{{{name}}}_regex) {
                {{{name}}}_regex = OpenAPI_regex_register("{{{pattern}}}");
                if (!{{{name}}}_regex) {
                    ogs_warn("{{classname}}_parseFromJSON(): Bad regex pattern for {{title}}.{{baseName}}, will not validate the format");
                }
            }
            if ({{{name}}}_regex && !OpenAPI_regex_match({{{name}}}_regex, {{{name}}}_local->valuestring)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: pattern does not match");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element does not match string validation pattern";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
                            {{/pattern}}
            OpenAPI_list_add({{{name}}}List, ogs_strdup({{{name}}}_local->valuestring));
                        {{/isString}}
                        {{#isByteArray}}
            if (!cJSON_IsString({{{name}}}_local)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not a string";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
            /* TODO: check that byte array string is base64 (and decode??) */
            OpenAPI_list_add({{{name}}}List, ogs_strdup({{{name}}}_local->valuestring));
                        {{/isByteArray}}
                        {{#isDate}}
            if (!cJSON_IsString({{{name}}}_local)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not a string";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }

            static OpenAPI_regex_t *{{{name}}}_regex = NULL;
            if (!{{{name}}}_regex) {
		{{{name}}}_regex = OpenAPI_regex_register_named("date", _OPENAPI_DATE_REGEX);
		if (!{{{name}}}_regex) {
		    ogs_error("{{classname}}_parseFromJSON(): Bad date format regex, please fix");
		    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to compile date regex for \"{{{baseName}}}\" array element";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
		    goto end;
		}
            }
            if ({{{name}}}_regex && !OpenAPI_regex_match({{{name}}}_regex, {{{name}}}_local->valuestring)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: array element is not a date string");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not a date string";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
                        {{/isDate}}
                        {{#isDateTime}}
            if (!cJSON_IsString({{{name}}}_local)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not a string";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }

            static OpenAPI_regex_t *{{{name}}}_regex = iNULL;
            if (!{{{name}}}_regex) {
                {{{name}}}_regex = OpenAPI_regex_register_named("date-time", _OPENAPI_DATE_TIME_REGEX);
                if (!{{{name}}}_regex) {
                    ogs_error("{{classname}}_parseFromJSON(): Bad date-time format regex, please fix");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to compile date-time regex for \"{{{baseName}}}\" array element";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
            }
            if ({{{name}}}_regex && !OpenAPI_regex_match({{{name}}}_regex, {{{name}}}_local->valuestring)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: array element is not a date-time string");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not a date-time string";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
                        {{/isDateTime}}
                        {{#isNumeric}}
            if (!cJSON_IsNumber({{{name}}}_local)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not a number";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
            {
                double *localDouble = (double *)ogs_calloc(1, sizeof(double));
                if (!localDouble) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to allocate memory for \"{{{baseName}}}\" array element";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                *localDouble = {{{name}}}_local->valuedouble;
                OpenAPI_list_add({{{name}}}List, localDouble);
            }
                        {{/isNumeric}}
                        {{#isBoolean}}
            if (!cJSON_IsBool({{{name}}}_local)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not a boolean";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
            {
                int *localInt = (int *)ogs_calloc(1, sizeof(int));
                if (!localInt) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to allocate memory for \"{{{baseName}}}\" array element";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                *localInt = {{{name}}}_local->valueint;
                OpenAPI_list_add({{{name}}}List, localInt);
            }
                        {{/isBoolean}}
                    {{/isPrimitiveType}}
                    {{^isPrimitiveType}}
                        {{#isModel}}
            if (!cJSON_IsObject({{{name}}}_local)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not an object";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
            {{complexType}}_t *{{{name}}}Item = {{complexType}}_parseFromJSON({{{name}}}_local, {{classname}}_as_request, {{classname}}_parse_err, {{classname}}_err_parameter);
            if (!{{{name}}}Item) {
                ogs_error("No {{{name}}}Item");
                /* {{classname}}_parse_err given by sub-parser */
                if ({{classname}}_err_parameter) {
                    if (*{{classname}}_err_parameter) {
                        char *param = ogs_msprintf("{{baseName}}.%s", *{{classname}}_err_parameter);
			ogs_free(*{{classname}}_err_parameter);
			*{{classname}}_err_parameter = param;
		    } else {
			*{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    }
                }
                goto end;
            }
            OpenAPI_list_add({{{name}}}List, {{{name}}}Item);
                        {{/isModel}}
                        {{^isModel}}
                            {{#isUuid}}
            if (!cJSON_IsString({{{name}}}_local)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not a string";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
            OpenAPI_list_add({{{name}}}List, ogs_strdup({{{name}}}_local->valuestring));
                            {{/isUuid}}
                            {{#isEmail}}
            if (!cJSON_IsString({{{name}}}_local)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not a string";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
            OpenAPI_list_add({{{name}}}List, ogs_strdup({{{name}}}_local->valuestring));
                            {{/isEmail}}
                            {{#isFreeFormObject}}
            if (!cJSON_IsObject({{{name}}}_local)) {
                ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" array element is not an object";
                if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                goto end;
            }
            OpenAPI_object_t *{{{name}}}Item = OpenAPI_object_parseFromJSON({{{name}}}_local, {{classname}}_as_request, {{classname}}_parse_err, {{classname}}_err_parameter);
            if (!{{{name}}}Item) {
                ogs_error("No {{{name}}}Item");
                /* {{classname}}_parse_err given by sub-parser */
		if ({{classname}}_err_parameter) {
                    if (*{{classname}}_err_parameter) {
                        char *param = ogs_msprintf("{{baseName}}.%s", *{{classname}}_err_parameter);
			ogs_free(*{{classname}}_err_parameter);
			*{{classname}}_err_parameter = param;
		    } else {
			*{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    }
                }
                goto end;
            }
            OpenAPI_list_add({{{name}}}List, {{{name}}}Item);
                            {{/isFreeFormObject}}
                            {{#isAnyType}}
            {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_t *{{{name}}}Item = {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_parseFromJSON({{{name}}}_local, {{classname}}_as_request, {{classname}}_parse_err, {{classname}}_err_parameter);
            if (!{{{name}}}Item) {
                ogs_error("No {{{name}}}Item");
                /* {{classname}}_parse_err given by sub-parser */
                if ({{classname}}_err_parameter) {
                    if (*{{classname}}_err_parameter) {
                        char *param = ogs_msprintf("{{baseName}}.%s", *{{classname}}_err_parameter);
                        ogs_free(*{{classname}}_err_parameter);
                        *{{classname}}_err_parameter = param;
                    } else {
                        *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    }
                }
                goto end;
            }
            OpenAPI_list_add({{{name}}}List, {{{name}}}Item);
                            {{/isAnyType}}
                        {{/isModel}}
                    {{/isPrimitiveType}}
                {{/items}}
            {{/isEnum}}
        }
        {{/isArray}}
        {{#isMap}}
        cJSON *{{{name}}}_local_map = NULL;
        if (!cJSON_IsObject({{{name}}}) && !cJSON_IsNull({{{name}}})) {
            ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
            if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not an object or 'null'";
            if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
            goto end;
        }
        if (cJSON_IsObject({{{name}}})) {
            {{{name}}}List = OpenAPI_list_create();
            OpenAPI_map_t *localMapKeyPair = NULL;
            cJSON_ArrayForEach({{{name}}}_local_map, {{{name}}}) {
                cJSON *localMapObject = {{{name}}}_local_map;
            {{#isEnum}}
                {{{complexType}}}_e {{{complexType}}}Value;
                if (!cJSON_IsString(localMapObject)) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" is not a map of enumeration strings";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                {{{complexType}}}Value = {{{complexType}}}_FromString(localMapObject->string);
                if ({{{complexType}}}Value < 0) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" map contains unrecognised enumeration values";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                localMapKeyPair = OpenAPI_map_create(ogs_strdup(localMapObject->string), (void *){{{complexType}}}Value);
            {{/isEnum}}
            {{^isEnum}}
                {{^items.isContainer}}
                    {{#items.isPrimitiveType}}
                        {{#items.isString}}
                if (!cJSON_IsString(localMapObject)) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" map value is not a string";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                            {{#items.pattern}}
                static OpenAPI_regex_t *localMapValueRegex = NULL;
                if (!localMapValueRegex) {
                    localMapValueRegex = OpenAPI_regex_register("{{{items.pattern}}}");
                    if (!localMapValueRegex) {
                        ogs_warn("{{classname}}_parseFromJSON(): Bad regex for [{{{name}}}] field, ignoring validation");
                    }
                }
                if (localMapValueRegex && !OpenAPI_regex_match(localMapValueRegex, localMapObject->valuestring)) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: pattern does not match");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" map value does not match string validation pattern";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                            {{/items.pattern}}
                localMapKeyPair = OpenAPI_map_create(ogs_strdup(localMapObject->string), ogs_strdup(localMapObject->valuestring));
                        {{/items.isString}}
                        {{#items.isByteArray}}
                if (!cJSON_IsString(localMapObject)) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" map value is not a string";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                localMapKeyPair = OpenAPI_map_create(ogs_strdup(localMapObject->string), ogs_strdup(localMapObject->valuestring));
                        {{/items.isByteArray}}
                        {{#items.isDate}}
                if (!cJSON_IsString(localMapObject)) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" map value is not a string";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                static OpenAPI_regex_t *localMapValueRegex = NULL;
                if (!localMapValueRegex) {
                    localMapValueRegex = OpenAPI_regex_register_named("date", _OPENAPI_DATE_REGEX);
                    if (!localMapValueRegex) {
                        ogs_error("{{classname}}_parseFromJSON(): Unable to compile date validation regex for [{{{name}}}]");
                        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to initialise date validation for \"{{{baseName}}}\" map value";
                        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                        goto end;
                    }
                }
                if (localMapValueRegex && !OpenAPI_regex_match(localMapValueRegex, localMapObject->valuestring)) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: map value is not a date string");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" map value is not a date string";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                        {{/items.isDate}}
                        {{#items.isDateTime}}
                if (!cJSON_IsString(localMapObject)) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" map value is not a string";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                static OpenAPI_regex_t *localMapValueRegex = NULL;
                if (!localMapValueRegex) {
                    localMapValueRegex =OpenAPI_regex_register_named("date-time", _OPENAPI_DATE_TIME_REGEX);
                    if (!localMapValueRegex) {
                        ogs_error("{{classname}}_parseFromJSON(): Unable to compile date-time validation regex for [{{{name}}}]");
                        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to initialise date-time validation for \"{{{baseName}}}\" map value";
                        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                        goto end;
                    }
                }
                if (localMapValueRegex && !OpenAPI_regex_match(localMapValueRegex, localMapObject->valuestring)) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]: map value is not a date-time string");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" map value is not a date-time string";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                        {{/items.isDateTime}}
                        {{#items.isNumeric}}
                if (!cJSON_IsNumber(localMapObject)) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" map value is not a number";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                {
                    double *localDouble = (double *)ogs_calloc(1, sizeof(double));
                    if (!localDouble) {
                        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to allocate memory for \"{{{baseName}}}\" map element";
                        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                        goto end;
                    }
                    *localDouble = localMapObject->valuedouble;
                    localMapKeyPair = OpenAPI_map_create(ogs_strdup(localMapObject->string), localDouble);
                }
                        {{/items.isNumeric}}
                        {{#items.isBoolean}}
                if (!cJSON_IsBool(localMapObject)) {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}\" map value is not a boolean";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                {
                    int *localInt = (int *)ogs_calloc(1, sizeof(int));
                    if (!localInt) {
                        ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}]");
                        if ({{classname}}_parse_err) *{{classname}}_parse_err = "Failed to allocate memory for \"{{{baseName}}}\" map element";
                        if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                        goto end;
                    }
                    *localInt = localMapObject->valueint;
                    localMapKeyPair = OpenAPI_map_create(ogs_strdup(localMapObject->string), localInt);
                }
                        {{/items.isBoolean}}
                    {{/items.isPrimitiveType}}
                    {{^items.isPrimitiveType}}
                if (cJSON_IsObject(localMapObject)) {
                    localMapKeyPair = OpenAPI_map_create(
                        ogs_strdup(localMapObject->string), {{items.complexType}}_parseFromJSON(localMapObject, {{classname}}_as_request, {{classname}}_parse_err, {{classname}}_err_parameter));
                } else if (cJSON_IsNull(localMapObject)) {
                    localMapKeyPair = OpenAPI_map_create(ogs_strdup(localMapObject->string), NULL);
                } else {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}.{{{items.name}}}]");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}/{{{items.baseName}}}\" map value is not an object or 'null'";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                    {{/items.isPrimitiveType}}
                {{/items.isContainer}}
                {{#items.isContainer}}
                    {{#items.isArray}}
                if (cJSON_IsArray(localMapObject)) {
                    cJSON *json_array_node = NULL;
                    OpenAPI_list_t *new_array = OpenAPI_list_create();
                    cJSON_ArrayForEach(json_array_node, localMapObject) {
                        {{#items.items.isPrimativeType}}
#error "Not implemented yet"
                        {{/items.items.isPrimativeType}}
                        {{^items.items.isPrimativeType}}
                        {{items.items.dataType}}_t *node_data = {{items.items.dataType}}_parseFromJSON(json_array_node, {{classname}}_as_request, {{classname}}_parse_err, {{classname}}_err_parameter);
                        if (!node_data) {
			    if ({{classname}}_err_parameter) {
				if (*{{classname}}_err_parameter) {
				    char *param = ogs_msprintf("{{baseName}}.%s", *{{classname}}_err_parameter);
                                    ogs_free(*{{classname}}_err_parameter);
                                    *{{classname}}_err_parameter = param;
                                } else {
                                    *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                                }
                            }
                            goto end;
                        }
                        OpenAPI_list_add(new_array, node_data);
                            {{/items.items.isPrimativeType}}
                    }
                    localMapKeyPair = OpenAPI_map_create(
                        ogs_strdup(localMapObject->string), new_array);
                } else if (cJSON_IsNull(localMapObject)) {
                    localMapKeyPair = OpenAPI_map_create(ogs_strdup(localMapObject->string), NULL);
                } else {
                    ogs_error("{{classname}}_parseFromJSON() failed [{{{name}}}.{{{items.name}}}]");
                    if ({{classname}}_parse_err) *{{classname}}_parse_err = "Field \"{{{baseName}}}/{{{items.baseName}}}\" map value is not an array or 'null'";
                    if ({{classname}}_err_parameter) *{{classname}}_err_parameter = ogs_strdup("{{baseName}}");
                    goto end;
                }
                    {{/items.isArray}}
                    {{#items.isMap}}
#error "Not implemented yet!"
                    {{/items.isMap}}
                {{/items.isContainer}}
            {{/isEnum}}
                OpenAPI_list_add({{{name}}}List, localMapKeyPair);
            }
        }
        {{/isMap}}
    {{/isContainer}}
    {{^required}}
    }
    {{/required}}
    {{#isWriteOnly}}
    }
    {{/isWriteOnly}}
    {{#isReadOnly}}
    }
    {{/isReadOnly}}
{{/vars}}
    {{classname}}_local_var = {{classname}}_create (
{{#vars}}
    {{^isContainer}}
        {{^isPrimitiveType}}
            {{#isEnum}}
        {{{name}}} ? {{{name}}}Variable : 0{{^-last}},{{/-last}}
            {{/isEnum}}
            {{^isEnum}}
                {{#isModel}}
        {{{name}}} ? {{{name}}}_local_nonprim : NULL{{^-last}},{{/-last}}
                {{/isModel}}
                {{^isModel}}
                    {{#isUuid}}
        {{{name}}} ? ogs_strdup({{{name}}}->valuestring) : NULL{{^-last}},{{/-last}}
                    {{/isUuid}}
                    {{#isEmail}}
        {{{name}}} ? ogs_strdup({{{name}}}->valuestring) : NULL{{^-last}},{{/-last}}
                    {{/isEmail}}
                    {{#isFreeFormObject}}
        {{{name}}} ? {{{name}}}_local_object : NULL{{^-last}},{{/-last}}
                    {{/isFreeFormObject}}
                    {{#isAnyType}}
        {{{name}}} ? {{{name}}}_local_object : NULL{{^-last}},{{/-last}}
                    {{/isAnyType}}
                {{/isModel}}
            {{/isEnum}}
        {{/isPrimitiveType}}
        {{#isPrimitiveType}}
            {{#isEnum}}
        {{{name}}} ? {{name}}Variable : 0{{^-last}},{{/-last}}
            {{/isEnum}}
            {{^isEnum}}
                {{#isNumeric}}
        {{^required}}{{{name}}} ? true : false,{{/required}}
        {{{name}}} ? {{{name}}}->valuedouble : 0{{^-last}},{{/-last}}
                {{/isNumeric}}
                {{#isBoolean}}
        {{^required}}{{{name}}} ? true : false,{{/required}}
        {{{name}}} ? {{{name}}}->valueint : 0{{^-last}},{{/-last}}
                {{/isBoolean}}
                {{#isString}}
        {{{name}}} && !cJSON_IsNull({{{name}}}) ? ogs_strdup({{{name}}}->valuestring) : NULL{{^-last}},{{/-last}}
                {{/isString}}
                {{#isModel}}
        {{{name}}}Ptr{{^-last}},{{/-last}}
                {{/isModel}}
                {{#isByteArray}}
        {{{name}}} && !cJSON_IsNull({{{name}}}) ? ogs_strdup({{{name}}}->valuestring) : NULL{{^-last}},{{/-last}}
                {{/isByteArray}}
            {{/isEnum}}
            {{#isBinary}}
        {{{name}}} ? decoded_str_{{{name}}} : NULL{{^-last}},{{/-last}}
            {{/isBinary}}
            {{#isDate}}
        {{{name}}} ? ogs_strdup({{{name}}}->valuestring) : NULL{{^-last}},{{/-last}}
            {{/isDate}}
            {{#isDateTime}}
        {{{name}}} && !cJSON_IsNull({{{name}}}) ? ogs_strdup({{{name}}}->valuestring) : NULL{{^-last}},{{/-last}}
            {{/isDateTime}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
        {{#isArray}}
        {{{name}}} ? {{{name}}}List : NULL{{^-last}},{{/-last}}
        {{/isArray}}
        {{#isMap}}
        {{{name}}} ? {{{name}}}List : NULL{{^-last}},{{/-last}}
        {{/isMap}}
    {{/isContainer}}
{{/vars}}{{^hasVars}}
    {{#isString}}
    value
    {{/isString}}{{^isString}}
        {{#composedSchemas}}
            {{#allOf}}
#error "Not implemented yet!"
            {{/allOf}}
            {{#anyOf}}
                {{#isPrimitiveType}}
    {{name}}{{^-last}},{{/-last}}
                {{/isPrimitiveType}}{{^isPrimitiveType}}
#error "Not implemented yet!"
                {{/isPrimitiveType}}
            {{/anyOf}}
            {{#oneOf}}
#error "Not implemented yet!"
            {{/oneOf}}
        {{/composedSchemas}}
    {{/isString}}
{{/hasVars}}
    );

    return {{classname}}_local_var;
end:
{{#vars}}
    {{^isContainer}}
        {{^isPrimitiveType}}
            {{^isEnum}}
                {{#isModel}}
    if ({{{name}}}_local_nonprim) {
        {{{complexType}}}_free({{{name}}}_local_nonprim);
        {{{name}}}_local_nonprim = NULL;
    }
                {{/isModel}}
                {{^isModel}}
                    {{#isFreeFormObject}}
    if ({{{name}}}_local_object) {
        OpenAPI_object_free({{{name}}}_local_object);
        {{{name}}}_local_object = NULL;
    }
                    {{/isFreeFormObject}}
                    {{#isAnyType}}
    if ({{name}}_local_object) {
        {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_free({{name}}_local_object);
        {{name}}_local_object = NULL;
    }
                    {{/isAnyType}}
                {{/isModel}}
            {{/isEnum}}
        {{/isPrimitiveType}}
        {{#isPrimitiveType}}
          {{#isModel}}
    if ({{name}}Ptr) ogs_free({{name}}Ptr);
          {{/isModel}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
        {{#isArray}}
    if ({{{name}}}List) {
            {{^isEnum}}
        OpenAPI_lnode_t *node = NULL;
        OpenAPI_list_for_each({{{name}}}List, node) {
                {{#isPrimitiveType}}
            ogs_free(node->data);
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                    {{#isModel}}
            {{complexType}}_free(node->data);
                    {{/isModel}}
                    {{^isModel}}
                        {{#isFreeFormObject}}
            OpenAPI_object_free(node->data);
                        {{/isFreeFormObject}}
                        {{#isAnyType}}
            {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_free(node->data);
                        {{/isAnyType}}
                    {{/isModel}}
                {{/isPrimitiveType}}
        }
            {{/isEnum}}
        OpenAPI_list_free({{{name}}}List);
        {{{name}}}List = NULL;
    }
        {{/isArray}}
        {{#isMap}}
    if ({{{name}}}List) {
        OpenAPI_lnode_t *node = NULL;
        OpenAPI_list_for_each({{{name}}}List, node) {
            OpenAPI_map_t *localKeyValue = (OpenAPI_map_t*) node->data;
            ogs_free(localKeyValue->key);
            {{^items.isEnum}}
                {{#items.isPrimitiveType}}
            ogs_free(localKeyValue->value);
                {{/items.isPrimitiveType}}
                {{^items.isPrimitiveType}}
                    {{#items.isModel}}
            {{items.complexType}}_free(localKeyValue->value);
                    {{/items.isModel}}
                    {{^items.isModel}}
                        {{#items.isFreeFormObject}}
            OpenAPI_object_free(localKeyValue->value);
                        {{/items.isFreeFormObject}}
                        {{#items.isAnyType}}
            {{#modelNamePrefix}}{{#lambda.lowercase}}{{modelNamePrefix}}{{/lambda.lowercase}}{{/modelNamePrefix}}{{^modelNamePrefix}}OpenAPI{{/modelNamePrefix}}_any_type_free(localKeyValue->value);
                        {{/items.isAnyType}}
                    {{/items.isModel}}
                {{/items.isPrimitiveType}}
            {{/items.isEnum}}
            OpenAPI_map_free(localKeyValue);
        }
        OpenAPI_list_free({{{name}}}List);
        {{{name}}}List = NULL;
    }
        {{/isMap}}
    {{/isContainer}}
{{/vars}}
{{^hasVars}}
    {{#isString}}
    if (value) ogs_free(value);
    {{/isString}}
    {{^isString}}
        {{#composedSchemas}}
            {{#allOf}}
#error "Not implemented yet!"
            {{/allOf}}
            {{#anyOf}}
                {{#isPrimitiveType}}
    if ({{name}}) ogs_free({{name}});
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
#error "Not implemented yet!"
                {{/isPrimitiveType}}
            {{/anyOf}}
            {{#oneOf}}
#error "Not implemented yet!"
            {{/oneOf}}
        {{/composedSchemas}}
    {{/isString}}
{{/hasVars}}
    return NULL;
}
