#!/bin/sh
#
# 5G-MAG Reference Tools: Generate OpenAPI bindings tool
# ======================================================
#
# Author(s): David Waring <david.warin2@bbc.co.uk>
#            Dev Audsin <dev.audsin@bbc.co.uk>
# Copyright: Â©2022 British Broadcasting Corporation
#   License: 5G-MAG Public License v1.0
#
# Prerequisites:
#   - git
#   - java
#   - wget
#
# For full license terms please see the LICENSE file distributed with this
# program. If this file is missing then the license can be retrieved from
# https://drive.google.com/file/d/1cinCiA778IErENZ3JN52VFW-1ffHpx7Z/view
#
# This script will use wget and git to download the openapi-generator-cli tool
# and a specified branch of the 5G APIs. It will then create a set of bindings
# in a specified output language.
#

# Save location of this script and the name it was called by
scriptname=`basename "$0"`
scriptdir=`dirname "$0"`
scriptdir=`cd "$scriptdir"; pwd`

# Command line option defaults
default_branch='REL-17'
default_language=
default_api=
default_destdir='openapi'
default_openapi_gen_config=
default_openapi_gen_version='6.0.1'
default_yaml_dir_processor=
default_overrides_dirs=""
default_debug=
default_model_name_prefix=
default_model_package=
default_cache_dir=

# script constants
GIT_5G_APIS_URL='https://forge.3gpp.org/rep/all/5G_APIs.git'
OPENAPI_GEN_URL_FORMAT='https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/${OPENAPI_GEN_VERSION}/openapi-generator-cli-${OPENAPI_GEN_VERSION}.jar'
JMUSTACHE_VERSION=1.16
MAVEN_SAMSKIVERT_JMUSTACHE_URL_FORMAT='https://repo1.maven.org/maven2/com/samskivert/jmustache/${JMUSTACHE_VERSION}/jmustache-${JMUSTACHE_VERSION}.jar'

# Parse command line arguments
ARGS=`getopt -n "$scriptname" -o 'a:b:c:C:l:d:Dg:ho:p:P:y:' -l 'api:,branch:,generator-config:,cache-dir:,language:,directory:,debug,openapi-generator-version:,help,overrides-directories:,model-name-prefix:,model-package:,yaml-directory-processor:' -s sh -- "$@"`

if [ $? -ne 0 ]; then
    print_syntax >&2
    exit 1
fi

print_syntax() {
    echo "Syntax: $scriptname [-h] [-D] [-b <release-branch>] [-d <directory>]"
    echo '                    [-c <openapi-generator-config>] [-g <version>]'
    echo '                    [-o <overrides-dir>[:<overrides-dir>...]]'
    echo '                    [-y <yaml-dir-processor>] [-p <prefix>]'
    echo '                    [-P <package>] -a <API-name>'
    echo '                    -l <language>[:<additional-properties>]'
}

print_help() {
    cat <<EOF
5G-MAG Reference Tools - Generate OpenAPI bindings

This script will download the 5G APIs and openapi-generator-cli tool and uses
them to create bindings of the specified language.

EOF
    print_syntax
    cat <<EOF

Options:
  -h         --help           Show this help message and exit.
  -D         --debug          Output model debugging.
  -a APIS    --api APIS       Space separated list of OpenAPI interfaces to
                              generate the bindings from (e.g.
                              "TS26512_M1_ContentHostingProvisioning").
  -b BRANCH  --branch BRANCH  Use the given branch of the 5G_APIs repository.
                              [default: $default_branch]
  -c CONFIG  --generator-config CONFIG
                              A configuration file to pass to
                              openapi-generator-cli.
  -C DIR     --cache-dir DIR  Directory to cache openapi-generator, jmustache
                              and the 5G_APIs in. [default: use temporary dir]
  -d DIR     --directory DIR  Directory for the OpenAPI bindings.
                              [default: $default_destdir]
  -g VERSION --openapi-generator-version VERSION
                              Version of the openapi-generator-cli to use.
                              [default: $default_openapi_gen_version]
  -l LANG[:PROP[,PROP...]]  --language LANG[:PROP[,PROP...]]
                              Output language to use for OpenAPI bindings (e.g.
                              c or python).
  -o OVERRIDES-DIRS --overrides-directories OVERRIDES-DIRS
                              An optional list of directory paths, separated
                              by colons, that will be searched for OpenAPI YAML
                              files before the 5G APIs repository versions.
  -p PREFIX  --model-name-prefix PREFIX
                              Name to prefix generated model names with.
  -P PACKAGE --model-package PACKAGE
                              Name of package/namespace to use for the model.
  -y EXE     --yaml-directory-processor EXE
                              Executable to run to process the 5G API yaml
                              directory before the generator is run. EXE will
                              be run with the 5G API directory path as its only
                              argument.
EOF
}

eval set -- "$ARGS"
unset ARGS

APIS="$default_api"
BRANCH="$default_branch"
DIRECTORY="$default_destdir"
LANGUAGE="$default_language"
OPENAPI_GEN_CONFIG="$default_openapi_gen_config"
OPENAPI_GEN_VERSION="$default_openapi_gen_version"
YAML_DIR_PROCESSOR="$default_yaml_dir_processor"
OVERRIDES_DIRS="$default_overrides_dirs"
DEBUG="$default_debug"
MODEL_NAME_PREFIX="$default_model_name_prefix"
MODEL_PACKAGE="$default_model_package"
CACHE_DIR="$default_cache_dir"

while true; do
    case "$1" in
    -a|--api)
	APIS="$2"
	shift 2
	continue
	;;
    -b|--branch)
	BRANCH="$2"
	shift 2
	continue
	;;
    -c|--generator-config)
	OPENAPI_GEN_CONFIG="$2"
	shift 2
	continue
	;;
    -C|--cache-dir)
        CACHE_DIR="$2"
        shift 2
        continue
        ;;
    -l|--language)
	LANGUAGE="$2"
	shift 2
	continue
	;;
    -d|--directory)
	DIRECTORY="$2"
	shift 2
	continue
	;;
    -D|--debug)
	DEBUG=Y
	shift
        continue
	;;
    -g|--openapi-generator-version)
	OPENAPI_GEN_VERSION="$2"
	shift 2
	continue
	;;
    -h|--help)
	print_help
	exit 0
	;;
    -o|--overrides-directories)
	OVERRIDES_DIRS="$2"
	shift 2
	continue
	;;
    -p|--model-name-prefix)
        MODEL_NAME_PREFIX="$2"
        shift 2
        continue
        ;;
    -P|--model-package)
        MODEL_PACKAGE="$2"
        shift 2
        continue
        ;;
    -y|--yaml-directory-processor)
	YAML_DIR_PROCESSOR="$2"
	shift 2
	continue
	;;
    --)
	shift
	break
	;;
    *)
	echo "Error: Command line argument \"$1\" unexpected" >&2
	print_syntax >&2
	exit 1
	;;
    esac
done

if [ $# -gt 0 ]; then
    echo "Error: Command line argument \"$1\" unexpected" >&2
    print_syntax >&2
    exit 1
fi

if [ -z "$APIS" -o -z "$LANGUAGE" ]; then
    echo 'Error: Required command line parameters are missing' >&2
    print_syntax >&2
    exit 1
fi

find_java() {
    # Use the JAVA environment variable if set else look for "java" command
    if [ -n "$JAVA" ]; then
	echo $JAVA
    else
	which java
    fi
}

# Get the absolute path to the destination directory
destdir=`realpath -m "$DIRECTORY"`

# Get the absolute path of the YAML directory processor executable
if [ -n "$YAML_DIR_PROCESSOR" ]; then
    YAML_DIR_PROCESSOR=`realpath "$YAML_DIR_PROCESSOR"`
    if [ ! -x "$YAML_DIR_PROCESSOR" ]; then
	echo "YAML directory processor is not executable" >&2
	exit 1
    fi
fi

# Convert openapi-generator-cli configuration file path to absolute path
if [ -n "$OPENAPI_GEN_CONFIG" ]; then
    OPENAPI_GEN_CONFIG=`realpath "$OPENAPI_GEN_CONFIG"`
fi

# Debug flags
if [ "$DEBUG" = "Y" ]; then
    debugmodels="--global-property verbose=true,debugModels,debugOperations,debugOpenAPI,debugSupportingFiles"
fi

# Find JAVA
java=`find_java`

reverse_paths() {
    old_IFS="$IFS"
    IFS=:
    rev=''
    for p in $1; do
	p=`realpath "$p"`
	rev="${p}:$rev"
    done
    IFS="$old_IFS"
    echo "${rev%:}"
}

if [ -n "$OVERRIDES_DIRS" ]; then
    rev_overrides_dirs=`reverse_paths "$OVERRIDES_DIRS"`
    echo "Overrides directories: $rev_overrides_dirs"
else
    rev_overrides_dirs=""
    echo "No overrides to process"
fi

if [ -z "$CACHE_DIR" ]; then
    # Create temporary directory to work in
    tmpdir=`mktemp -d --tmpdir openapi-generator.XXXXXXXX`
    trap "rm -rf '$tmpdir'" 0 1 2 3 4 5 6 7 8 10 11 12 13 14
else
    tmpdir="$CACHE_DIR"
    if [ ! -d "$tmpdir" ]; then
        mkdir -p "$tmpdir"
    fi
fi

if [ ! -d "$tmpdir" ]; then
    echo "Error: Unable to create cache directory" >&2
    exit 1
fi

(
    cd "$tmpdir"

    # Check for relative templates path in provided config file
    if [ -f "$OPENAPI_GEN_CONFIG" ]; then
	ogen_templateDir=`sed -n 's/\s*$//;s/^templateDir:\s*\(["'\'']\{0,1\}\)\(.*\)\1$/\2/p' "$OPENAPI_GEN_CONFIG"`
	if echo "$ogen_templateDir" | grep -q '^[^/]'; then
            # templateDir is relative so convert it to absolute in a copy of the config
	    sed 's@^templateDir:.*@templateDir: "'`dirname "$OPENAPI_GEN_CONFIG"`"/$ogen_templateDir"'"@' "$OPENAPI_GEN_CONFIG" > oapi_gen_config.yaml
	    OPENAPI_GEN_CONFIG="$tmpdir/oapi_gen_config.yaml"
	fi
    fi

    # Download openapi-generator-cli
    openapi_gen_url=`eval echo "$OPENAPI_GEN_URL_FORMAT"`
    openapi_gen_jar=`basename "$openapi_gen_url"`
    if [ ! -e "$openapi_gen_jar" ]; then
        if ! wget "$openapi_gen_url" -O "$openapi_gen_jar"; then
            echo "Error: Failed to fetch openapi-generator-cli" >&2
            exit 1
        fi
    fi

    # Download JMustache
    jmustache_url=`eval echo "$MAVEN_SAMSKIVERT_JMUSTACHE_URL_FORMAT"`
    jmustache_jar=`basename "$jmustache_url"`
    if [ ! -e "$jmustache_jar" ]; then
        if ! wget "$jmustache_url" -O "$jmustache_jar"; then
            echo "Error: Failed to fetch jmustache" >&2
            exit 1
        fi
    fi

    if [ ! -d 5G_APIs ]; then
        # Clone the 5G APIs git repository
        if ! git clone -b "$BRANCH" "$GIT_5G_APIS_URL"; then
            echo "Error: Failed to fetch branch $BRANCH from the 5G_APIs repository" >&2
            exit 1
        fi
    else
        (
	    cd 5G_APIs
            # Get latest updates
            if ! git fetch -p --all; then
                echo "Error: Failed to update local clone of 5G_APIs repository" >&2
                exit 1
            fi
            # clean any local changes
            git reset --hard HEAD
            git clean --force -d -x --quiet
            # change branch
            git checkout "$BRANCH"
        )
    fi
    echo "At commit "`cd 5G_APIs; git log -g --pretty='format:%h %d' --max-count=1 HEAD`

    # import overrides
    if [ -n "$rev_overrides_dirs" ]; then
        (
	    IFS=:
	    for p in $rev_overrides_dirs; do
		echo "Copying YAML files from $p..."
		find "$p" -maxdepth 1 -type f -name '*.yaml' -print0 | xargs -0 -I ARGS /bin/cp -f ARGS 5G_APIs/
	    done
        )
    fi

    # Make sure we have the APIS requested
    have_apis=1
    for API in $APIS; do
        if [ ! -e "5G_APIs/${API}.yaml" ]; then
            echo "Error: Could not find requested API, $API, in the 5G_APIs repository" >&2
	    have_apis=0
	fi
    done
    if [ $have_apis = 0 ]; then
	exit 1
    fi

    # Run YAML directory processor if one given
    if [ -n "$YAML_DIR_PROCESSOR" ]; then
	"$YAML_DIR_PROCESSOR" "$tmpdir/5G_APIs"
    fi

    # Prepare for API generation
    unset language
    unset additional_props
    IFS=: read -r language additional_props <<EOF
$LANGUAGE
EOF
    if [ -d "$destdir" ] && ! rm -rf "$destdir"; then
        echo "Error: Unable to remove old $DIRECTORY directory for replacement" >&2
	exit 1
    fi
    if ! mkdir -p "$destdir"; then
	echo "Error: Unable to create output directory $DIRECTORY" >&2
	exit 1
    fi
    for API in $APIS; do
        # Use openapi-generator-cli to convert the API file to the language
	api_name_normal="$API"
	api_name_lower=`echo "$API" | tr 'A-Z' 'a-z'`
	api_name_upper=`echo "$API" | tr 'a-z' 'A-Z'`
        # bindings
        "$java" -classpath "$jmustache_jar":"$openapi_gen_jar" org.openapitools.codegen.OpenAPIGenerator generate -i "5G_APIs/${API}.yaml" ${OPENAPI_GEN_CONFIG:+-c $OPENAPI_GEN_CONFIG} -g ${language} ${additional_props:+--additional-properties $additional_props} -o "${destdir}" ${debugmodels} ${MODEL_NAME_PREFIX:+--model-name-prefix $MODEL_NAME_PREFIX} ${MODEL_PACKAGE:+--model-package $MODEL_PACKAGE}
	# Rename untagged API files to include the original API name.
	if [ -d "${destdir}/api" ]; then
	    find "${destdir}/api" -type f '(' -name '*Default*' -o -name '*DEFAULT*' -o -name '*default*' ')' -print | while read filename; do
        	newname=`echo "$filename" | sed "s/Default/${api_name_normal}/g;s/DEFAULT/${api_name_upper}/g;s/default/${api_name_lower}/g"`
		mv "$filename" "$newname"
	    done	
        fi
    done
)

exit 0
